webpackJsonp([2],{

/***/ "./node_modules/process/browser.js":
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/reflect-metadata/Reflect.ts":
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    \"use strict\";\n    var hasOwn = Object.prototype.hasOwnProperty;\n    // feature test for Symbol support\n    var supportsSymbol = typeof Symbol === \"function\";\n    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n    var HashMap;\n    (function (HashMap) {\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n        HashMap.create = supportsCreate\n            ? function () { return MakeDictionary(Object.create(null)); }\n            : supportsProto\n                ? function () { return MakeDictionary({ __proto__: null }); }\n                : function () { return MakeDictionary({}); };\n        HashMap.has = downLevel\n            ? function (map, key) { return hasOwn.call(map, key); }\n            : function (map, key) { return key in map; };\n        HashMap.get = downLevel\n            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n            : function (map, key) { return map[key]; };\n    })(HashMap || (HashMap = {}));\n    // Load global or shim versions of Map, Set, and WeakMap\n    var functionPrototype = Object.getPrototypeOf(Function);\n    var usePolyfill = typeof process === \"object\" && Object({\"NODE_ENV\":\"development\"}) && Object({\"NODE_ENV\":\"development\"})[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n    var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n    var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n    var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n    // [[Metadata]] internal slot\n    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n    var Metadata = new _WeakMap();\n    /**\n      * Applies a set of decorators to a property of a target object.\n      * @param decorators An array of decorators.\n      * @param target The target object.\n      * @param propertyKey (Optional) The property key to decorate.\n      * @param attributes (Optional) The property descriptor for the target key.\n      * @remarks Decorators are applied in reverse order.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     Example = Reflect.decorate(decoratorsArray, Example);\n      *\n      *     // property (on constructor)\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     Object.defineProperty(Example, \"staticMethod\",\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n      *\n      *     // method (on prototype)\n      *     Object.defineProperty(Example.prototype, \"method\",\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n      *\n      */\n    function decorate(decorators, target, propertyKey, attributes) {\n        if (!IsUndefined(propertyKey)) {\n            if (!IsArray(decorators))\n                throw new TypeError();\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                throw new TypeError();\n            if (IsNull(attributes))\n                attributes = undefined;\n            propertyKey = ToPropertyKey(propertyKey);\n            return DecorateProperty(decorators, target, propertyKey, attributes);\n        }\n        else {\n            if (!IsArray(decorators))\n                throw new TypeError();\n            if (!IsConstructor(target))\n                throw new TypeError();\n            return DecorateConstructor(decorators, target);\n        }\n    }\n    Reflect.decorate = decorate;\n    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n    /**\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\n      * @param metadataKey The key for the metadata entry.\n      * @param metadataValue The value for the metadata entry.\n      * @returns A decorator function.\n      * @remarks\n      * If `metadataKey` is already defined for the target and target key, the\n      * metadataValue for that key will be overwritten.\n      * @example\n      *\n      *     // constructor\n      *     @Reflect.metadata(key, value)\n      *     class Example {\n      *     }\n      *\n      *     // property (on constructor, TypeScript only)\n      *     class Example {\n      *         @Reflect.metadata(key, value)\n      *         static staticProperty;\n      *     }\n      *\n      *     // property (on prototype, TypeScript only)\n      *     class Example {\n      *         @Reflect.metadata(key, value)\n      *         property;\n      *     }\n      *\n      *     // method (on constructor)\n      *     class Example {\n      *         @Reflect.metadata(key, value)\n      *         static staticMethod() { }\n      *     }\n      *\n      *     // method (on prototype)\n      *     class Example {\n      *         @Reflect.metadata(key, value)\n      *         method() { }\n      *     }\n      *\n      */\n    function metadata(metadataKey, metadataValue) {\n        function decorator(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                throw new TypeError();\n            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        return decorator;\n    }\n    Reflect.metadata = metadata;\n    /**\n      * Define a unique metadata entry on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param metadataValue A value that contains attached metadata.\n      * @param target The target object on which to define metadata.\n      * @param propertyKey (Optional) The property key for the target.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n      *\n      *     // property (on constructor)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n      *\n      *     // decorator factory as metadata-producing annotation.\n      *     function MyAnnotation(options): Decorator {\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n      *     }\n      *\n      */\n    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n    }\n    Reflect.defineMetadata = defineMetadata;\n    /**\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey (Optional) The property key for the target.\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n      *\n      */\n    function hasMetadata(metadataKey, target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n    }\n    Reflect.hasMetadata = hasMetadata;\n    /**\n      * Gets a value indicating whether the target object has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey (Optional) The property key for the target.\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n      *\n      */\n    function hasOwnMetadata(metadataKey, target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n    }\n    Reflect.hasOwnMetadata = hasOwnMetadata;\n    /**\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey (Optional) The property key for the target.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n      *\n      */\n    function getMetadata(metadataKey, target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n    }\n    Reflect.getMetadata = getMetadata;\n    /**\n      * Gets the metadata value for the provided metadata key on the target object.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey (Optional) The property key for the target.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n      *\n      */\n    function getOwnMetadata(metadataKey, target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n    }\n    Reflect.getOwnMetadata = getOwnMetadata;\n    /**\n      * Gets the metadata keys defined on the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey (Optional) The property key for the target.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getMetadataKeys(Example);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n      *\n      */\n    function getMetadataKeys(target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        return OrdinaryMetadataKeys(target, propertyKey);\n    }\n    Reflect.getMetadataKeys = getMetadataKeys;\n    /**\n      * Gets the unique metadata keys defined on the target object.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey (Optional) The property key for the target.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getOwnMetadataKeys(Example);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n      *\n      */\n    function getOwnMetadataKeys(target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        return OrdinaryOwnMetadataKeys(target, propertyKey);\n    }\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\n    /**\n      * Deletes the metadata entry from the target object with the provided key.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey (Optional) The property key for the target.\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n      * @example\n      *\n      *     class Example {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;\n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { }\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n      *\n      */\n    function deleteMetadata(metadataKey, target, propertyKey) {\n        if (!IsObject(target))\n            throw new TypeError();\n        if (!IsUndefined(propertyKey))\n            propertyKey = ToPropertyKey(propertyKey);\n        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n        if (IsUndefined(metadataMap))\n            return false;\n        if (!metadataMap.delete(metadataKey))\n            return false;\n        if (metadataMap.size > 0)\n            return true;\n        var targetMetadata = Metadata.get(target);\n        targetMetadata.delete(propertyKey);\n        if (targetMetadata.size > 0)\n            return true;\n        Metadata.delete(target);\n        return true;\n    }\n    Reflect.deleteMetadata = deleteMetadata;\n    function DecorateConstructor(decorators, target) {\n        for (var i = decorators.length - 1; i >= 0; --i) {\n            var decorator = decorators[i];\n            var decorated = decorator(target);\n            if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                if (!IsConstructor(decorated))\n                    throw new TypeError();\n                target = decorated;\n            }\n        }\n        return target;\n    }\n    function DecorateProperty(decorators, target, propertyKey, descriptor) {\n        for (var i = decorators.length - 1; i >= 0; --i) {\n            var decorator = decorators[i];\n            var decorated = decorator(target, propertyKey, descriptor);\n            if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                if (!IsObject(decorated))\n                    throw new TypeError();\n                descriptor = decorated;\n            }\n        }\n        return descriptor;\n    }\n    function GetOrCreateMetadataMap(O, P, Create) {\n        var targetMetadata = Metadata.get(O);\n        if (IsUndefined(targetMetadata)) {\n            if (!Create)\n                return undefined;\n            targetMetadata = new _Map();\n            Metadata.set(O, targetMetadata);\n        }\n        var metadataMap = targetMetadata.get(P);\n        if (IsUndefined(metadataMap)) {\n            if (!Create)\n                return undefined;\n            metadataMap = new _Map();\n            targetMetadata.set(P, metadataMap);\n        }\n        return metadataMap;\n    }\n    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n        if (hasOwn)\n            return true;\n        var parent = OrdinaryGetPrototypeOf(O);\n        if (!IsNull(parent))\n            return OrdinaryHasMetadata(MetadataKey, parent, P);\n        return false;\n    }\n    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n        if (IsUndefined(metadataMap))\n            return false;\n        return ToBoolean(metadataMap.has(MetadataKey));\n    }\n    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n        if (hasOwn)\n            return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n        var parent = OrdinaryGetPrototypeOf(O);\n        if (!IsNull(parent))\n            return OrdinaryGetMetadata(MetadataKey, parent, P);\n        return undefined;\n    }\n    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n        if (IsUndefined(metadataMap))\n            return undefined;\n        return metadataMap.get(MetadataKey);\n    }\n    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n        metadataMap.set(MetadataKey, MetadataValue);\n    }\n    // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n    function OrdinaryMetadataKeys(O, P) {\n        var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n        var parent = OrdinaryGetPrototypeOf(O);\n        if (parent === null)\n            return ownKeys;\n        var parentKeys = OrdinaryMetadataKeys(parent, P);\n        if (parentKeys.length <= 0)\n            return ownKeys;\n        if (ownKeys.length <= 0)\n            return parentKeys;\n        var set = new _Set();\n        var keys = [];\n        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n            var key = ownKeys_1[_i];\n            var hasKey = set.has(key);\n            if (!hasKey) {\n                set.add(key);\n                keys.push(key);\n            }\n        }\n        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n            var key = parentKeys_1[_a];\n            var hasKey = set.has(key);\n            if (!hasKey) {\n                set.add(key);\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n    function OrdinaryOwnMetadataKeys(O, P) {\n        var keys = [];\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n        if (IsUndefined(metadataMap))\n            return keys;\n        var keysObj = metadataMap.keys();\n        var iterator = GetIterator(keysObj);\n        var k = 0;\n        while (true) {\n            var next = IteratorStep(iterator);\n            if (!next) {\n                keys.length = k;\n                return keys;\n            }\n            var nextValue = IteratorValue(next);\n            try {\n                keys[k] = nextValue;\n            }\n            catch (e) {\n                try {\n                    IteratorClose(iterator);\n                }\n                finally {\n                    throw e;\n                }\n            }\n            k++;\n        }\n    }\n    // 6 ECMAScript Data Typ0es and Values\n    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n    function Type(x) {\n        if (x === null)\n            return Tag.Null;\n        switch (typeof x) {\n            case \"undefined\": return Tag.Undefined;\n            case \"boolean\": return Tag.Boolean;\n            case \"string\": return Tag.String;\n            case \"symbol\": return Tag.Symbol;\n            case \"number\": return Tag.Number;\n            case \"object\": return x === null ? Tag.Null : Tag.Object;\n            default: return Tag.Object;\n        }\n    }\n    // 6.1 ECMAScript Language Types\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types\n    var Tag;\n    (function (Tag) {\n        Tag[Tag[\"Undefined\"] = 0] = \"Undefined\";\n        Tag[Tag[\"Null\"] = 1] = \"Null\";\n        Tag[Tag[\"Boolean\"] = 2] = \"Boolean\";\n        Tag[Tag[\"String\"] = 3] = \"String\";\n        Tag[Tag[\"Symbol\"] = 4] = \"Symbol\";\n        Tag[Tag[\"Number\"] = 5] = \"Number\";\n        Tag[Tag[\"Object\"] = 6] = \"Object\";\n    })(Tag || (Tag = {}));\n    // 6.1.1 The Undefined Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n    function IsUndefined(x) {\n        return x === undefined;\n    }\n    // 6.1.2 The Null Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n    function IsNull(x) {\n        return x === null;\n    }\n    // 6.1.5 The Symbol Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n    function IsSymbol(x) {\n        return typeof x === \"symbol\";\n    }\n    // 6.1.7 The Object Type\n    // https://tc39.github.io/ecma262/#sec-object-type\n    function IsObject(x) {\n        return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n    }\n    // 7.1 Type Conversion\n    // https://tc39.github.io/ecma262/#sec-type-conversion\n    // 7.1.1 ToPrimitive(input [, PreferredType])\n    // https://tc39.github.io/ecma262/#sec-toprimitive\n    function ToPrimitive(input, PreferredType) {\n        switch (Type(input)) {\n            case Tag.Undefined: return input;\n            case Tag.Null: return input;\n            case Tag.Boolean: return input;\n            case Tag.String: return input;\n            case Tag.Symbol: return input;\n            case Tag.Number: return input;\n        }\n        var hint = PreferredType === Tag.String ? \"string\" : PreferredType === Tag.Number ? \"number\" : \"default\";\n        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n        if (exoticToPrim !== undefined) {\n            var result = exoticToPrim.call(input, hint);\n            if (IsObject(result))\n                throw new TypeError();\n            return result;\n        }\n        return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n    }\n    // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n    function OrdinaryToPrimitive(O, hint) {\n        if (hint === \"string\") {\n            var toString = O.toString;\n            if (IsCallable(toString)) {\n                var result = toString.call(O);\n                if (!IsObject(result))\n                    return result;\n            }\n            var valueOf = O.valueOf;\n            if (IsCallable(valueOf)) {\n                var result = valueOf.call(O);\n                if (!IsObject(result))\n                    return result;\n            }\n        }\n        else {\n            var valueOf = O.valueOf;\n            if (IsCallable(valueOf)) {\n                var result = valueOf.call(O);\n                if (!IsObject(result))\n                    return result;\n            }\n            var toString = O.toString;\n            if (IsCallable(toString)) {\n                var result = toString.call(O);\n                if (!IsObject(result))\n                    return result;\n            }\n        }\n        throw new TypeError();\n    }\n    // 7.1.2 ToBoolean(argument)\n    // https://tc39.github.io/ecma262/2016/#sec-toboolean\n    function ToBoolean(argument) {\n        return !!argument;\n    }\n    // 7.1.12 ToString(argument)\n    // https://tc39.github.io/ecma262/#sec-tostring\n    function ToString(argument) {\n        return \"\" + argument;\n    }\n    // 7.1.14 ToPropertyKey(argument)\n    // https://tc39.github.io/ecma262/#sec-topropertykey\n    function ToPropertyKey(argument) {\n        var key = ToPrimitive(argument, Tag.String);\n        if (IsSymbol(key))\n            return key;\n        return ToString(key);\n    }\n    // 7.2 Testing and Comparison Operations\n    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n    // 7.2.2 IsArray(argument)\n    // https://tc39.github.io/ecma262/#sec-isarray\n    function IsArray(argument) {\n        return Array.isArray\n            ? Array.isArray(argument)\n            : argument instanceof Object\n                ? argument instanceof Array\n                : Object.prototype.toString.call(argument) === \"[object Array]\";\n    }\n    // 7.2.3 IsCallable(argument)\n    // https://tc39.github.io/ecma262/#sec-iscallable\n    function IsCallable(argument) {\n        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n        return typeof argument === \"function\";\n    }\n    // 7.2.4 IsConstructor(argument)\n    // https://tc39.github.io/ecma262/#sec-isconstructor\n    function IsConstructor(argument) {\n        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n        return typeof argument === \"function\";\n    }\n    // 7.2.7 IsPropertyKey(argument)\n    // https://tc39.github.io/ecma262/#sec-ispropertykey\n    function IsPropertyKey(argument) {\n        switch (Type(argument)) {\n            case Tag.String: return true;\n            case Tag.Symbol: return true;\n            default: return false;\n        }\n    }\n    // 7.3 Operations on Objects\n    // https://tc39.github.io/ecma262/#sec-operations-on-objects\n    // 7.3.9 GetMethod(V, P)\n    // https://tc39.github.io/ecma262/#sec-getmethod\n    function GetMethod(V, P) {\n        var func = V[P];\n        if (func === undefined || func === null)\n            return undefined;\n        if (!IsCallable(func))\n            throw new TypeError();\n        return func;\n    }\n    // 7.4 Operations on Iterator Objects\n    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n    function GetIterator(obj) {\n        var method = GetMethod(obj, iteratorSymbol);\n        if (!IsCallable(method))\n            throw new TypeError(); // from Call\n        var iterator = method.call(obj);\n        if (!IsObject(iterator))\n            throw new TypeError();\n        return iterator;\n    }\n    // 7.4.4 IteratorValue(iterResult)\n    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n    function IteratorValue(iterResult) {\n        return iterResult.value;\n    }\n    // 7.4.5 IteratorStep(iterator)\n    // https://tc39.github.io/ecma262/#sec-iteratorstep\n    function IteratorStep(iterator) {\n        var result = iterator.next();\n        return result.done ? false : result;\n    }\n    // 7.4.6 IteratorClose(iterator, completion)\n    // https://tc39.github.io/ecma262/#sec-iteratorclose\n    function IteratorClose(iterator) {\n        var f = iterator[\"return\"];\n        if (f)\n            f.call(iterator);\n    }\n    // 9.1 Ordinary Object Internal Methods and Internal Slots\n    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n    // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n    function OrdinaryGetPrototypeOf(O) {\n        var proto = Object.getPrototypeOf(O);\n        if (typeof O !== \"function\" || O === functionPrototype)\n            return proto;\n        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n        // Try to determine the superclass constructor. Compatible implementations\n        // must either set __proto__ on a subclass constructor to the superclass constructor,\n        // or ensure each class has a valid `constructor` property on its prototype that\n        // points back to the constructor.\n        // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n        // This is the case when in ES6 or when using __proto__ in a compatible browser.\n        if (proto !== functionPrototype)\n            return proto;\n        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n        var prototype = O.prototype;\n        var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n        if (prototypeProto == null || prototypeProto === Object.prototype)\n            return proto;\n        // If the constructor was not a function, then we cannot determine the heritage.\n        var constructor = prototypeProto.constructor;\n        if (typeof constructor !== \"function\")\n            return proto;\n        // If we have some kind of self-reference, then we cannot determine the heritage.\n        if (constructor === O)\n            return proto;\n        // we have a pretty good guess at the heritage.\n        return constructor;\n    }\n    // naive Map shim\n    function CreateMapPolyfill() {\n        var cacheSentinel = {};\n        var arraySentinel = [];\n        var MapIterator = (function () {\n            function MapIterator(keys, values, selector) {\n                this._index = 0;\n                this._keys = keys;\n                this._values = values;\n                this._selector = selector;\n            }\n            MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n            MapIterator.prototype[iteratorSymbol] = function () { return this; };\n            MapIterator.prototype.next = function () {\n                var index = this._index;\n                if (index >= 0 && index < this._keys.length) {\n                    var result = this._selector(this._keys[index], this._values[index]);\n                    if (index + 1 >= this._keys.length) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    else {\n                        this._index++;\n                    }\n                    return { value: result, done: false };\n                }\n                return { value: undefined, done: true };\n            };\n            MapIterator.prototype.throw = function (error) {\n                if (this._index >= 0) {\n                    this._index = -1;\n                    this._keys = arraySentinel;\n                    this._values = arraySentinel;\n                }\n                throw error;\n            };\n            MapIterator.prototype.return = function (value) {\n                if (this._index >= 0) {\n                    this._index = -1;\n                    this._keys = arraySentinel;\n                    this._values = arraySentinel;\n                }\n                return { value: value, done: true };\n            };\n            return MapIterator;\n        }());\n        return (function () {\n            function Map() {\n                this._keys = [];\n                this._values = [];\n                this._cacheKey = cacheSentinel;\n                this._cacheIndex = -2;\n            }\n            Object.defineProperty(Map.prototype, \"size\", {\n                get: function () { return this._keys.length; },\n                enumerable: true,\n                configurable: true\n            });\n            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n            Map.prototype.get = function (key) {\n                var index = this._find(key, /*insert*/ false);\n                return index >= 0 ? this._values[index] : undefined;\n            };\n            Map.prototype.set = function (key, value) {\n                var index = this._find(key, /*insert*/ true);\n                this._values[index] = value;\n                return this;\n            };\n            Map.prototype.delete = function (key) {\n                var index = this._find(key, /*insert*/ false);\n                if (index >= 0) {\n                    var size = this._keys.length;\n                    for (var i = index + 1; i < size; i++) {\n                        this._keys[i - 1] = this._keys[i];\n                        this._values[i - 1] = this._values[i];\n                    }\n                    this._keys.length--;\n                    this._values.length--;\n                    if (key === this._cacheKey) {\n                        this._cacheKey = cacheSentinel;\n                        this._cacheIndex = -2;\n                    }\n                    return true;\n                }\n                return false;\n            };\n            Map.prototype.clear = function () {\n                this._keys.length = 0;\n                this._values.length = 0;\n                this._cacheKey = cacheSentinel;\n                this._cacheIndex = -2;\n            };\n            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n            Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n            Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n            Map.prototype._find = function (key, insert) {\n                if (this._cacheKey !== key) {\n                    this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                }\n                if (this._cacheIndex < 0 && insert) {\n                    this._cacheIndex = this._keys.length;\n                    this._keys.push(key);\n                    this._values.push(undefined);\n                }\n                return this._cacheIndex;\n            };\n            return Map;\n        }());\n        function getKey(key, _) {\n            return key;\n        }\n        function getValue(_, value) {\n            return value;\n        }\n        function getEntry(key, value) {\n            return [key, value];\n        }\n    }\n    // naive Set shim\n    function CreateSetPolyfill() {\n        return (function () {\n            function Set() {\n                this._map = new _Map();\n            }\n            Object.defineProperty(Set.prototype, \"size\", {\n                get: function () { return this._map.size; },\n                enumerable: true,\n                configurable: true\n            });\n            Set.prototype.has = function (value) { return this._map.has(value); };\n            Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n            Set.prototype.delete = function (value) { return this._map.delete(value); };\n            Set.prototype.clear = function () { this._map.clear(); };\n            Set.prototype.keys = function () { return this._map.keys(); };\n            Set.prototype.values = function () { return this._map.values(); };\n            Set.prototype.entries = function () { return this._map.entries(); };\n            Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n            Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n            return Set;\n        }());\n    }\n    // naive WeakMap shim\n    function CreateWeakMapPolyfill() {\n        var UUID_SIZE = 16;\n        var keys = HashMap.create();\n        var rootKey = CreateUniqueKey();\n        return (function () {\n            function WeakMap() {\n                this._key = CreateUniqueKey();\n            }\n            WeakMap.prototype.has = function (target) {\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                return table !== undefined ? HashMap.has(table, this._key) : false;\n            };\n            WeakMap.prototype.get = function (target) {\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                return table !== undefined ? HashMap.get(table, this._key) : undefined;\n            };\n            WeakMap.prototype.set = function (target, value) {\n                var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                table[this._key] = value;\n                return this;\n            };\n            WeakMap.prototype.delete = function (target) {\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                return table !== undefined ? delete table[this._key] : false;\n            };\n            WeakMap.prototype.clear = function () {\n                // NOTE: not a real clear, just makes the previous data unreachable\n                this._key = CreateUniqueKey();\n            };\n            return WeakMap;\n        }());\n        function CreateUniqueKey() {\n            var key;\n            do\n                key = \"@@WeakMap@@\" + CreateUUID();\n            while (HashMap.has(keys, key));\n            keys[key] = true;\n            return key;\n        }\n        function GetOrCreateWeakMapTable(target, create) {\n            if (!hasOwn.call(target, rootKey)) {\n                if (!create)\n                    return undefined;\n                Object.defineProperty(target, rootKey, { value: HashMap.create() });\n            }\n            return target[rootKey];\n        }\n        function FillRandomBytes(buffer, size) {\n            for (var i = 0; i < size; ++i)\n                buffer[i] = Math.random() * 0xff | 0;\n            return buffer;\n        }\n        function GenRandomBytes(size) {\n            if (typeof Uint8Array === \"function\") {\n                if (typeof crypto !== \"undefined\")\n                    return crypto.getRandomValues(new Uint8Array(size));\n                if (typeof msCrypto !== \"undefined\")\n                    return msCrypto.getRandomValues(new Uint8Array(size));\n                return FillRandomBytes(new Uint8Array(size), size);\n            }\n            return FillRandomBytes(new Array(size), size);\n        }\n        function CreateUUID() {\n            var data = GenRandomBytes(UUID_SIZE);\n            // mark as random - RFC 4122 § 4.4\n            data[6] = data[6] & 0x4f | 0x40;\n            data[8] = data[8] & 0xbf | 0x80;\n            var result = \"\";\n            for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                var byte = data[offset];\n                if (offset === 4 || offset === 6 || offset === 8)\n                    result += \"-\";\n                if (byte < 16)\n                    result += \"0\";\n                result += byte.toString(16).toLowerCase();\n            }\n            return result;\n        }\n    }\n    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n    function MakeDictionary(obj) {\n        obj.__ = undefined;\n        delete obj.__;\n        return obj;\n    }\n    // patch global Reflect\n    (function (__global) {\n        if (typeof __global.Reflect !== \"undefined\") {\n            if (__global.Reflect !== Reflect) {\n                for (var p in Reflect) {\n                    if (hasOwn.call(Reflect, p)) {\n                        __global.Reflect[p] = Reflect[p];\n                    }\n                }\n            }\n        }\n        else {\n            __global.Reflect = Reflect;\n        }\n    })(typeof global !== \"undefined\" ? global :\n        typeof self !== \"undefined\" ? self :\n            Function(\"return this;\")());\n})(Reflect || (Reflect = {}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"./node_modules/process/browser.js\"), __webpack_require__(\"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/reflect-metadata/Reflect.ts\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/zone.js/dist/zone.js":
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\t true ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Zone$1 = (function (global) {\n    var performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    if (global['Zone']) {\n        throw new Error('Zone already loaded.');\n    }\n    var Zone = (function () {\n        function Zone(parent, zoneSpec) {\n            this._properties = null;\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        Zone.assertZonePatched = function () {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        };\n        Object.defineProperty(Zone, \"root\", {\n            get: function () {\n                var zone = Zone.current;\n                while (zone.parent) {\n                    zone = zone.parent;\n                }\n                return zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Zone, \"current\", {\n            get: function () {\n                return _currentZoneFrame.zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone, \"currentTask\", {\n            get: function () {\n                return _currentTask;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Zone.__load_patch = function (name, fn) {\n            if (patches.hasOwnProperty(name)) {\n                throw Error('Already loaded patch: ' + name);\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                var perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        };\n        Object.defineProperty(Zone.prototype, \"parent\", {\n            get: function () {\n                return this._parent;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone.prototype, \"name\", {\n            get: function () {\n                return this._name;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Zone.prototype.get = function (key) {\n            var zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        };\n        Zone.prototype.getZoneWith = function (key) {\n            var current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        };\n        Zone.prototype.fork = function (zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        };\n        Zone.prototype.wrap = function (callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            var _callback = this._zoneDelegate.intercept(this, callback, source);\n            var zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        };\n        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = undefined; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = null; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runTask = function (task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            // we have to define an variable here, if not\n            // typescript compiler will complain below\n            var isNotScheduled = task.state === notScheduled;\n            if (isNotScheduled && task.type === eventTask) {\n                return;\n            }\n            var reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            var previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = null;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        };\n        Zone.prototype.scheduleTask = function (task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                var newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(\"can not reschedule task to \" + this\n                            .name + \" which is descendants of the original zone \" + task.zone.name);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            var zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        };\n        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));\n        };\n        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.cancelTask = function (task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        };\n        Zone.prototype._updateTaskCount = function (task, count) {\n            var zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (var i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        };\n        return Zone;\n    }());\n    Zone.__symbol__ = __symbol__;\n    var DELEGATE_ZS = {\n        name: '',\n        onHasTask: function (delegate, _, target, hasTaskState) {\n            return delegate.hasTask(target, hasTaskState);\n        },\n        onScheduleTask: function (delegate, _, target, task) {\n            return delegate.scheduleTask(target, task);\n        },\n        onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) { return delegate.invokeTask(target, task, applyThis, applyArgs); },\n        onCancelTask: function (delegate, _, target, task) {\n            return delegate.cancelTask(target, task);\n        }\n    };\n    var ZoneDelegate = (function () {\n        function ZoneDelegate(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt =\n                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        };\n        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        };\n        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ?\n                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        };\n        ZoneDelegate.prototype.handleError = function (targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        };\n        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {\n            var returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        };\n        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ?\n                this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        };\n        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {\n            var value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        };\n        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                return this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        };\n        ZoneDelegate.prototype._updateTaskCount = function (type, count) {\n            var counts = this._taskCounts;\n            var prev = counts[type];\n            var next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                var isEmpty = {\n                    microTask: counts.microTask > 0,\n                    macroTask: counts.macroTask > 0,\n                    eventTask: counts.eventTask > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        };\n        return ZoneDelegate;\n    }());\n    var OPTIMIZED_ZONE_EVENT_TASK = Zone.__symbol__('optimizedZoneEventTask');\n    var ZoneTask = (function () {\n        function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {\n            this._zone = null;\n            this.runCount = 0;\n            this._zoneDelegates = null;\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            this.callback = callback;\n            var self = this;\n            if (type === eventTask && options === OPTIMIZED_ZONE_EVENT_TASK) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.apply(global, [self, this, arguments]);\n                };\n            }\n        }\n        ZoneTask.invokeTask = function (task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        };\n        Object.defineProperty(ZoneTask.prototype, \"zone\", {\n            get: function () {\n                return this._zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ZoneTask.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ZoneTask.prototype.cancelScheduleRequest = function () {\n            this._transitionTo(notScheduled, scheduling);\n        };\n        ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(this.type + \" '\" + this.source + \"': can not transition to '\" + toState + \"', expecting state '\" + fromState1 + \"'\" + (fromState2 ?\n                    ' or \\'' + fromState2 + '\\'' :\n                    '') + \", was '\" + this._state + \"'.\");\n            }\n        };\n        ZoneTask.prototype.toString = function () {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId;\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        };\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        ZoneTask.prototype.toJSON = function () {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                invoke: this.invoke,\n                scheduleFn: this.scheduleFn,\n                cancelFn: this.cancelFn,\n                runCount: this.runCount,\n                callback: this.callback\n            };\n        };\n        return ZoneTask;\n    }());\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    var symbolSetTimeout = __symbol__('setTimeout');\n    var symbolPromise = __symbol__('Promise');\n    var symbolThen = __symbol__('then');\n    var _microTaskQueue = [];\n    var _isDrainingMicrotaskQueue = false;\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            if (global[symbolPromise]) {\n                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);\n            }\n            else {\n                global[symbolSetTimeout](drainMicroTaskQueue, 0);\n            }\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                var queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (var i = 0; i < queue.length; i++) {\n                    var task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            var showError = !Zone[__symbol__('ignoreConsoleErrorUncaughtError')];\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    var NO_ZONE = { name: 'NO ZONE' };\n    var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    var patches = {};\n    var _api = {\n        symbol: __symbol__,\n        currentZoneFrame: function () { return _currentZoneFrame; },\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: function () { return !Zone[__symbol__('ignoreConsoleErrorUncaughtError')]; },\n        patchEventTargetMethods: function () { return false; },\n        patchOnProperties: noop,\n        patchMethod: function () { return noop; },\n    };\n    var _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    var _currentTask = null;\n    var _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    function __symbol__(name) {\n        return '__zone_symbol__' + name;\n    }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('ZoneAwarePromise', function (global, Zone, api) {\n    var __symbol__ = api.symbol;\n    var _uncaughtPromiseErrors = [];\n    var symbolPromise = __symbol__('Promise');\n    var symbolThen = __symbol__('then');\n    api.onUnhandledError = function (e) {\n        if (api.showUncaughtError()) {\n            var rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = function () {\n        while (_uncaughtPromiseErrors.length) {\n            var _loop_1 = function () {\n                var uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n                try {\n                    uncaughtPromiseError.zone.runGuarded(function () {\n                        throw uncaughtPromiseError;\n                    });\n                }\n                catch (error) {\n                    handleUnhandledRejection(error);\n                }\n            };\n            while (_uncaughtPromiseErrors.length) {\n                _loop_1();\n            }\n        }\n    };\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            var handler = Zone[__symbol__('unhandledPromiseRejectionHandler')];\n            if (handler && typeof handler === 'function') {\n                handler.apply(this, [e]);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    var symbolState = __symbol__('state');\n    var symbolValue = __symbol__('value');\n    var source = 'Promise.then';\n    var UNRESOLVED = null;\n    var RESOLVED = true;\n    var REJECTED = false;\n    var REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return function (v) {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    var once = function () {\n        var wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        var onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError('Promise resolved with itself');\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            var then = null;\n            try {\n                if (typeof value === 'object' || typeof value === 'function') {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(function () {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === 'function') {\n                try {\n                    then.apply(value, [\n                        onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false))\n                    ]);\n                }\n                catch (err) {\n                    onceWrapper(function () {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                var queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    value[__symbol__('currentTask')] = Zone.currentTask;\n                }\n                for (var i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    try {\n                        throw new Error('Uncaught (in promise): ' + value +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        var error_1 = err;\n                        error_1.rejection = value;\n                        error_1.promise = promise;\n                        error_1.zone = Zone.current;\n                        error_1.task = Zone.currentTask;\n                        _uncaughtPromiseErrors.push(error_1);\n                        api.scheduleMicroTask(); // to make sure that it is running\n                    }\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                var handler = Zone[__symbol__('rejectionHandledHandler')];\n                if (handler && typeof handler === 'function') {\n                    handler.apply(this, [{ rejection: promise[symbolValue], promise: promise }]);\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        var delegate = promise[symbolState] ?\n            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\n            (typeof onRejected === 'function') ? onRejected : forwardRejection;\n        zone.scheduleMicroTask(source, function () {\n            try {\n                resolvePromise(chainPromise, true, zone.run(delegate, undefined, [promise[symbolValue]]));\n            }\n            catch (error) {\n                resolvePromise(chainPromise, false, error);\n            }\n        });\n    }\n    var ZoneAwarePromise = (function () {\n        function ZoneAwarePromise(executor) {\n            var promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        ZoneAwarePromise.toString = function () {\n            return 'function ZoneAwarePromise() { [native code] }';\n        };\n        ZoneAwarePromise.resolve = function (value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        };\n        ZoneAwarePromise.reject = function (error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        };\n        ZoneAwarePromise.race = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                _a = [res, rej], resolve = _a[0], reject = _a[1];\n                var _a;\n            });\n            function onResolve(value) {\n                promise && (promise = null || resolve(value));\n            }\n            function onReject(error) {\n                promise && (promise = null || reject(error));\n            }\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                var value = values_1[_i];\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then(onResolve, onReject);\n            }\n            return promise;\n        };\n        ZoneAwarePromise.all = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                resolve = res;\n                reject = rej;\n            });\n            var count = 0;\n            var resolvedValues = [];\n            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {\n                var value = values_2[_i];\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then((function (index) { return function (value) {\n                    resolvedValues[index] = value;\n                    count--;\n                    if (!count) {\n                        resolve(resolvedValues);\n                    }\n                }; })(count), reject);\n                count++;\n            }\n            if (!count)\n                resolve(resolvedValues);\n            return promise;\n        };\n        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {\n            var chainPromise = new this.constructor(null);\n            var zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        };\n        ZoneAwarePromise.prototype.catch = function (onRejected) {\n            return this.then(null, onRejected);\n        };\n        return ZoneAwarePromise;\n    }());\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    var NativePromise = global[symbolPromise] = global['Promise'];\n    global['Promise'] = ZoneAwarePromise;\n    var symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        var proto = Ctor.prototype;\n        var originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        Ctor.prototype.then = function (onResolve, onReject) {\n            var _this = this;\n            var wrapped = new ZoneAwarePromise(function (resolve, reject) {\n                originalThen.call(_this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    function zoneify(fn) {\n        return function () {\n            var resultPromise = fn.apply(this, arguments);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            var ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        var fetch_1 = global['fetch'];\n        if (typeof fetch_1 == 'function') {\n            global['fetch'] = zoneify(fetch_1);\n        }\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis}\n */\nvar zoneSymbol = Zone.__symbol__;\nvar _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;\nfunction bindArguments(args, source) {\n    for (var i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = Zone.current.wrap(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    var source = prototype.constructor['name'];\n    var _loop_1 = function (i) {\n        var name_1 = fnNames[i];\n        var delegate = prototype[name_1];\n        if (delegate) {\n            prototype[name_1] = (function (delegate) {\n                var patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    };\n    for (var i = 0; i < fnNames.length; i++) {\n        _loop_1(i);\n    }\n}\nvar isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidently browserify\n// this code.\nvar isNode = (!('nw' in _global$1) && typeof _global$1.process !== 'undefined' &&\n    {}.toString.call(_global$1.process) === '[object process]');\nvar isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidently browserify\n// this code.\nvar isMix = typeof _global$1.process !== 'undefined' &&\n    {}.toString.call(_global$1.process) === '[object process]' && !isWebWorker &&\n    !!(typeof window !== 'undefined' && window['HTMLElement']);\nfunction patchProperty(obj, prop, prototype) {\n    var desc = Object.getOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        var prototypeDesc = Object.getOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    var originalDescGet = desc.get;\n    // substr(2) cuz 'onclick' -> 'click', etc\n    var eventName = prop.substr(2);\n    var _prop = zoneSymbol('_' + prop);\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        var target = this;\n        if (!target && obj === _global$1) {\n            target = _global$1;\n        }\n        if (!target) {\n            return;\n        }\n        var previousValue = target[_prop];\n        if (previousValue) {\n            target.removeEventListener(eventName, previousValue);\n        }\n        if (typeof newValue === 'function') {\n            var wrapFn = function (event) {\n                var result = newValue.apply(this, arguments);\n                if (result != undefined && !result) {\n                    event.preventDefault();\n                }\n                return result;\n            };\n            target[_prop] = wrapFn;\n            target.addEventListener(eventName, wrapFn, false);\n        }\n        else {\n            target[_prop] = null;\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        var target = this;\n        if (!target && obj === _global$1) {\n            target = _global$1;\n        }\n        if (!target) {\n            return null;\n        }\n        if (target.hasOwnProperty(_prop)) {\n            return target[_prop];\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            var value = originalDescGet && originalDescGet.apply(this);\n            if (value) {\n                desc.set.apply(this, [value]);\n                if (typeof target['removeAttribute'] === 'function') {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(obj, prop, desc);\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (var i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        var onProperties = [];\n        for (var prop in obj) {\n            if (prop.substr(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (var j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nvar originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    var OriginalClass = _global$1[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global$1[zoneSymbol(className)] = OriginalClass;\n    _global$1[className] = function () {\n        var a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global$1[className], OriginalClass);\n    var instance = new OriginalClass(function () { });\n    var prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global$1[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                Object.defineProperty(_global$1[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global$1[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    var proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    var delegateName = zoneSymbol(name);\n    var delegate;\n    if (proto && !(delegate = proto[delegateName])) {\n        delegate = proto[delegateName] = proto[name];\n        var patchDelegate_1 = patchFn(delegate, delegateName, name);\n        proto[name] = function () {\n            return patchDelegate_1(this, arguments);\n        };\n        attachOriginToPatched(proto[name], delegate);\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    var setNative = null;\n    function scheduleTask(task) {\n        var data = task.data;\n        data.args[data.callbackIndex] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, function (delegate) { return function (self, args) {\n        var meta = metaCreator(self, args);\n        if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === 'function') {\n            var task = Zone.current.scheduleMacroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask, null);\n            return task;\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    }; });\n}\n\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nvar isDetectedIEOrEdge = false;\nvar ieOrEdge = false;\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        var ua = window.navigator.userAgent;\n        var msie = ua.indexOf('MSIE ');\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n        return ieOrEdge;\n    }\n    catch (error) {\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', function (global, Zone, api) {\n    // patch Func.prototype.toString to let them look like native\n    var originalFunctionToString = Zone['__zone_symbol__originalToString'] =\n        Function.prototype.toString;\n    Function.prototype.toString = function () {\n        if (typeof this === 'function') {\n            var originalDelegate = this[zoneSymbol('OriginalDelegate')];\n            if (originalDelegate) {\n                if (typeof originalDelegate === 'function') {\n                    return originalFunctionToString.apply(this[zoneSymbol('OriginalDelegate')], arguments);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                var nativePromise = global[zoneSymbol('Promise')];\n                if (nativePromise) {\n                    return originalFunctionToString.apply(nativePromise, arguments);\n                }\n            }\n            if (this === Error) {\n                var nativeError = global[zoneSymbol('Error')];\n                if (nativeError) {\n                    return originalFunctionToString.apply(nativeError, arguments);\n                }\n            }\n        }\n        return originalFunctionToString.apply(this, arguments);\n    };\n    // patch Object.prototype.toString to let them look like native\n    var originalObjectToString = Object.prototype.toString;\n    Object.prototype.toString = function () {\n        if (this instanceof Promise) {\n            return '[object Promise]';\n        }\n        return originalObjectToString.apply(this, arguments);\n    };\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TRUE_STR = 'true';\nvar FALSE_STR = 'false';\n// an identifier to tell ZoneTask do not create a new invoke closure\nvar OPTIMIZED_ZONE_EVENT_TASK = zoneSymbol('optimizedZoneEventTask');\nvar zoneSymbolEventNames = {};\nvar globalSources = {};\nvar CONSTRUCTOR_NAME = 'name';\nvar FUNCTION_TYPE = 'function';\nvar OBJECT_TYPE = 'object';\nvar ZONE_SYMBOL_PREFIX = '__zone_symbol__';\nvar EVENT_NAME_SYMBOL_REGX = /^__zone_symbol__(\\w+)(true|false)$/;\nvar invokeTask = function (task, target, event) {\n    var delegate = task.callback;\n    if (typeof delegate === OBJECT_TYPE && delegate.handleEvent) {\n        // create the bind version of handleEvnet when invoke\n        task.callback = function (event) { return delegate.handleEvent(event); };\n        task.originalDelegate = delegate;\n    }\n    // invoke static task.invoke\n    task.invoke(task, target, [event]);\n};\n// global shared zoneAwareCallback to handle all event callback with capture = false\nvar globalZoneAwareCallback = function (event) {\n    var target = this || _global;\n    var tasks = target[zoneSymbolEventNames[event.type][FALSE_STR]];\n    if (tasks) {\n        // invoke all tasks which attached to current target with given event.type and capture = false\n        for (var i = 0; i < tasks.length; i++) {\n            invokeTask(tasks[i], target, event);\n        }\n    }\n};\n// global shared zoneAwareCallback to handle all event callback with capture = true\nvar globalZoneAwareCaptureCallback = function (event) {\n    var target = this || _global;\n    var tasks = target[zoneSymbolEventNames[event.type][TRUE_STR]];\n    if (tasks) {\n        for (var i = 0; i < tasks.length; i++) {\n            invokeTask(tasks[i], target, event);\n        }\n    }\n};\nfunction patchEventTargetMethods(obj, patchOptions) {\n    if (!obj) {\n        return false;\n    }\n    var ADD_EVENT_LISTENER = (patchOptions && patchOptions.addEventListenerFnName) || 'addEventListener';\n    var REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.removeEventListenerFnName) || 'removeEventListener';\n    var LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listenersFnName) || 'eventListeners';\n    var REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.removeAllFnName) || 'removeAllListeners';\n    var zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    var ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    var PREPEND_EVENT_LISTENER = 'prependListener';\n    var PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    var useGlobalCallback = true;\n    if (patchOptions && patchOptions.useGlobalCallback !== undefined) {\n        useGlobalCallback = patchOptions.useGlobalCallback;\n    }\n    var validateHandler = patchOptions && patchOptions.validateHandler;\n    var checkDuplicate = true;\n    if (patchOptions && patchOptions.checkDuplicate !== undefined) {\n        checkDuplicate = patchOptions.checkDuplicate;\n    }\n    var returnTarget = false;\n    if (patchOptions && patchOptions.returnTarget !== undefined) {\n        returnTarget = patchOptions.returnTarget;\n    }\n    var proto = obj;\n    while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    if (!proto && obj[ADD_EVENT_LISTENER]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = obj;\n    }\n    if (!proto) {\n        return false;\n    }\n    if (proto[zoneSymbolAddEventListener]) {\n        return false;\n    }\n    // a shared global taskData to pass data for scheduleEventTask\n    // so we do not need to create a new object just for pass some data\n    var taskData = {};\n    var nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n    var nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n        proto[REMOVE_EVENT_LISTENER];\n    var nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n        proto[LISTENERS_EVENT_LISTENER];\n    var nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n    var nativePrependEventListener;\n    if (patchOptions && patchOptions.prependEventListenerFnName) {\n        nativePrependEventListener = proto[zoneSymbol(patchOptions.prependEventListenerFnName)] =\n            proto[patchOptions.prependEventListenerFnName];\n    }\n    var customScheduleGlobal = function (task) {\n        // if there is already a task for the eventName + capture,\n        // just return, because we use the shared globalZoneAwareCallback here.\n        if (taskData.isExisting) {\n            return;\n        }\n        return nativeAddEventListener.apply(taskData.target, [\n            taskData.eventName,\n            taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options\n        ]);\n    };\n    var customCancelGlobal = function (task) {\n        // if all tasks for the eventName + capture have gone,\n        // we will really remove the global event callback,\n        // if not, return\n        if (!task.remove) {\n            return;\n        }\n        return nativeRemoveEventListener.apply(task.target, [\n            task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback,\n            task.options\n        ]);\n    };\n    var customScheduleNonGlobal = function (task) {\n        return nativeAddEventListener.apply(taskData.target, [taskData.eventName, task.invoke, taskData.options]);\n    };\n    var customSchedulePrepend = function (task) {\n        return nativePrependEventListener.apply(taskData.target, [taskData.eventName, task.invoke, taskData.options]);\n    };\n    var customCancelNonGlobal = function (task) {\n        return nativeRemoveEventListener.apply(task.target, [task.eventName, task.invoke, task.options]);\n    };\n    var customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n    var customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n    var compareTaskCallbackVsDelegate = function (task, delegate) {\n        var typeOfDelegate = typeof delegate;\n        if ((typeOfDelegate === FUNCTION_TYPE && task.callback === delegate) ||\n            (typeOfDelegate === OBJECT_TYPE && task.originalDelegate === delegate)) {\n            // same callback, same capture, same event name, just return\n            return true;\n        }\n        return false;\n    };\n    var compare = (patchOptions && patchOptions.compareTaskCallbackVsDelegate) ?\n        patchOptions.compareTaskCallbackVsDelegate :\n        compareTaskCallbackVsDelegate;\n    var makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget, prepend) {\n        if (returnTarget === void 0) { returnTarget = false; }\n        if (prepend === void 0) { prepend = false; }\n        return function () {\n            var target = this || _global;\n            var targetZone = Zone.current;\n            var delegate = arguments[1];\n            if (!delegate) {\n                return nativeListener.apply(this, arguments);\n            }\n            // don't create the bind delegate function for handleEvent\n            // case here to improve addEventListener performance\n            // we will create the bind delegate when invoke\n            var isHandleEvent = false;\n            if (typeof delegate !== FUNCTION_TYPE) {\n                if (!delegate.handleEvent) {\n                    return nativeListener.apply(this, arguments);\n                }\n                isHandleEvent = true;\n            }\n            if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                return;\n            }\n            var eventName = arguments[0];\n            var options = arguments[2];\n            var capture;\n            if (options === undefined) {\n                capture = false;\n            }\n            else if (options === true) {\n                capture = true;\n            }\n            else if (options === false) {\n                capture = false;\n            }\n            else {\n                capture = options ? !!options.capture : false;\n            }\n            var zone = Zone.current;\n            var symbolEventNames = zoneSymbolEventNames[eventName];\n            var symbolEventName;\n            if (!symbolEventNames) {\n                // the code is duplicate, but I just want to get some better performance\n                var falseEventName = eventName + FALSE_STR;\n                var trueEventName = eventName + TRUE_STR;\n                var symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n                var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n                zoneSymbolEventNames[eventName] = {};\n                zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n                zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n                symbolEventName = capture ? symbolCapture : symbol;\n            }\n            else {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            var existingTasks = target[symbolEventName];\n            var isExisting = false;\n            if (existingTasks) {\n                // already have task registered\n                isExisting = true;\n                if (checkDuplicate) {\n                    for (var i = 0; i < existingTasks.length; i++) {\n                        if (compare(existingTasks[i], delegate)) {\n                            // same callback, same capture, same event name, just return\n                            return;\n                        }\n                    }\n                }\n            }\n            else {\n                existingTasks = target[symbolEventName] = [];\n            }\n            var source;\n            var constructorName = target.constructor[CONSTRUCTOR_NAME];\n            var targetSource = globalSources[constructorName];\n            if (targetSource) {\n                source = targetSource[eventName];\n            }\n            if (!source) {\n                source = constructorName + addSource + eventName;\n            }\n            // do not create a new object as task.data to pass those things\n            // just use the global shared one\n            taskData.options = options;\n            taskData.target = target;\n            taskData.capture = capture;\n            taskData.eventName = eventName;\n            taskData.isExisting = isExisting;\n            var data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK : null;\n            var task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n            // have to save those information to task in case\n            // application may call task.zone.cancelTask() directly\n            task.options = options;\n            task.target = target;\n            task.capture = capture;\n            task.eventName = eventName;\n            if (isHandleEvent) {\n                // save original delegate for compare to check duplicate\n                task.originalDelegate = delegate;\n            }\n            if (!prepend) {\n                existingTasks.push(task);\n            }\n            else {\n                existingTasks.unshift(task);\n            }\n            if (returnTarget) {\n                return target;\n            }\n        };\n    };\n    proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n    if (nativePrependEventListener) {\n        proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n    }\n    proto[REMOVE_EVENT_LISTENER] = function () {\n        var target = this || _global;\n        var eventName = arguments[0];\n        var options = arguments[2];\n        var capture;\n        if (options === undefined) {\n            capture = false;\n        }\n        else if (options === true) {\n            capture = true;\n        }\n        else if (options === false) {\n            capture = false;\n        }\n        else {\n            capture = options ? !!options.capture : false;\n        }\n        var delegate = arguments[1];\n        if (!delegate) {\n            return nativeRemoveEventListener.apply(this, arguments);\n        }\n        if (validateHandler &&\n            !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n            return;\n        }\n        var symbolEventNames = zoneSymbolEventNames[eventName];\n        var symbolEventName;\n        if (symbolEventNames) {\n            symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n        }\n        var existingTasks = symbolEventName && target[symbolEventName];\n        if (existingTasks) {\n            for (var i = 0; i < existingTasks.length; i++) {\n                var existingTask = existingTasks[i];\n                var typeOfDelegate = typeof delegate;\n                if (compare(existingTask, delegate)) {\n                    existingTasks.splice(i, 1);\n                    if (existingTasks.length === 0) {\n                        // all tasks for the eventName + capture have gone,\n                        // remove globalZoneAwareCallback and remove the task cache from target\n                        existingTask.remove = true;\n                        target[symbolEventName] = null;\n                    }\n                    existingTask.zone.cancelTask(existingTask);\n                    return;\n                }\n            }\n        }\n    };\n    proto[LISTENERS_EVENT_LISTENER] = function () {\n        var target = this || _global;\n        var eventName = arguments[0];\n        var listeners = [];\n        var tasks = findEventTasks(target, eventName);\n        for (var i = 0; i < tasks.length; i++) {\n            var task = tasks[i];\n            var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n            listeners.push(delegate);\n        }\n        return listeners;\n    };\n    proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n        var target = this || _global;\n        var eventName = arguments[0];\n        if (!eventName) {\n            var keys = Object.keys(target);\n            for (var i = 0; i < keys.length; i++) {\n                var prop = keys[i];\n                var match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                var evtName = match && match[1];\n                if (evtName && evtName !== 'removeListener') {\n                    this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].apply(this, [evtName]);\n                }\n            }\n            this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].apply(this, ['removeListener']);\n        }\n        else {\n            var symbolEventNames = zoneSymbolEventNames[eventName];\n            if (symbolEventNames) {\n                var symbolEventName = symbolEventNames[FALSE_STR];\n                var symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                var tasks = target[symbolEventName];\n                var captureTasks = target[symbolCaptureEventName];\n                if (tasks) {\n                    var removeTasks = tasks.slice();\n                    for (var i = 0; i < removeTasks.length; i++) {\n                        var task = removeTasks[i];\n                        var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                        this[REMOVE_EVENT_LISTENER].apply(this, [eventName, delegate, task.options]);\n                    }\n                }\n                if (captureTasks) {\n                    var removeTasks = captureTasks.slice();\n                    for (var i = 0; i < removeTasks.length; i++) {\n                        var task = removeTasks[i];\n                        var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                        this[REMOVE_EVENT_LISTENER].apply(this, [eventName, delegate, task.options]);\n                    }\n                }\n            }\n        }\n    };\n    // for native toString patch\n    attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n    attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n    if (nativeRemoveAllListeners) {\n        attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n    }\n    if (nativeListeners) {\n        attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n    }\n    return true;\n}\nfunction findEventTasks(target, eventName) {\n    var foundTasks = [];\n    for (var prop in target) {\n        var match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n        var evtName = match && match[1];\n        if (evtName && (!eventName || evtName === eventName)) {\n            var tasks = target[prop];\n            if (tasks) {\n                for (var i = 0; i < tasks.length; i++) {\n                    foundTasks.push(tasks[i]);\n                }\n            }\n        }\n    }\n    return foundTasks;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    var setNative = null;\n    var clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    var tasksByHandleId = {};\n    function scheduleTask(task) {\n        var data = task.data;\n        function timer() {\n            try {\n                task.invoke.apply(this, arguments);\n            }\n            finally {\n                if (typeof data.handleId === 'number') {\n                    // Node returns complex objects as handleIds\n                    delete tasksByHandleId[data.handleId];\n                }\n            }\n        }\n        data.args[0] = timer;\n        data.handleId = setNative.apply(window, data.args);\n        if (typeof data.handleId === 'number') {\n            // Node returns complex objects as handleIds -> no need to keep them around. Additionally,\n            // this throws an\n            // exception in older node versions and has no effect there, because of the stringified key.\n            tasksByHandleId[data.handleId] = task;\n        }\n        return task;\n    }\n    function clearTask(task) {\n        if (typeof task.data.handleId === 'number') {\n            // Node returns complex objects as handleIds\n            delete tasksByHandleId[task.data.handleId];\n        }\n        return clearNative(task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, function (delegate) { return function (self, args) {\n            if (typeof args[0] === 'function') {\n                var zone = Zone.current;\n                var options = {\n                    handleId: null,\n                    isPeriodic: nameSuffix === 'Interval',\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,\n                    args: args\n                };\n                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                var handle = task.data.handleId;\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\n                    typeof handle.unref === 'function') {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        }; });\n    clearNative =\n        patchMethod(window, cancelName, function (delegate) { return function (self, args) {\n            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];\n            if (task && typeof task.type === 'string') {\n                if (task.state !== 'notScheduled' &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        }; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/*\n * This is necessary for Chrome and Chrome mobile, to enable\n * things like redefining `createdCallback` on an element.\n */\nvar _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;\nvar _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =\n    Object.getOwnPropertyDescriptor;\nvar _create = Object.create;\nvar unconfigurablesKey = zoneSymbol('unconfigurables');\nfunction propertyPatch() {\n    Object.defineProperty = function (obj, prop, desc) {\n        if (isUnconfigurable(obj, prop)) {\n            throw new TypeError('Cannot assign to read only property \\'' + prop + '\\' of ' + obj);\n        }\n        var originalConfigurableFlag = desc.configurable;\n        if (prop !== 'prototype') {\n            desc = rewriteDescriptor(obj, prop, desc);\n        }\n        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n    };\n    Object.defineProperties = function (obj, props) {\n        Object.keys(props).forEach(function (prop) {\n            Object.defineProperty(obj, prop, props[prop]);\n        });\n        return obj;\n    };\n    Object.create = function (obj, proto) {\n        if (typeof proto === 'object' && !Object.isFrozen(proto)) {\n            Object.keys(proto).forEach(function (prop) {\n                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);\n            });\n        }\n        return _create(obj, proto);\n    };\n    Object.getOwnPropertyDescriptor = function (obj, prop) {\n        var desc = _getOwnPropertyDescriptor(obj, prop);\n        if (isUnconfigurable(obj, prop)) {\n            desc.configurable = false;\n        }\n        return desc;\n    };\n}\nfunction _redefineProperty(obj, prop, desc) {\n    var originalConfigurableFlag = desc.configurable;\n    desc = rewriteDescriptor(obj, prop, desc);\n    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n}\nfunction isUnconfigurable(obj, prop) {\n    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];\n}\nfunction rewriteDescriptor(obj, prop, desc) {\n    desc.configurable = true;\n    if (!desc.configurable) {\n        if (!obj[unconfigurablesKey]) {\n            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });\n        }\n        obj[unconfigurablesKey][prop] = true;\n    }\n    return desc;\n}\nfunction _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {\n    try {\n        return _defineProperty(obj, prop, desc);\n    }\n    catch (error) {\n        if (desc.configurable) {\n            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's\n            // retry with the original flag value\n            if (typeof originalConfigurableFlag == 'undefined') {\n                delete desc.configurable;\n            }\n            else {\n                desc.configurable = originalConfigurableFlag;\n            }\n            try {\n                return _defineProperty(obj, prop, desc);\n            }\n            catch (error) {\n                var descJson = null;\n                try {\n                    descJson = JSON.stringify(desc);\n                }\n                catch (error) {\n                    descJson = descJson.toString();\n                }\n                console.log(\"Attempting to configure '\" + prop + \"' with descriptor '\" + descJson + \"' on object '\" + obj + \"' and got error, giving up: \" + error);\n            }\n        }\n        else {\n            throw error;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// we have to patch the instance since the proto is non-configurable\nfunction apply(_global) {\n    var WS = _global.WebSocket;\n    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener\n    // On older Chrome, no need since EventTarget was already patched\n    if (!_global.EventTarget) {\n        patchEventTargetMethods(WS.prototype);\n    }\n    _global.WebSocket = function (a, b) {\n        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);\n        var proxySocket;\n        var proxySocketProto;\n        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance\n        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');\n        if (onmessageDesc && onmessageDesc.configurable === false) {\n            proxySocket = Object.create(socket);\n            // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'\n            // but proxySocket not, so we will keep socket as prototype and pass it to\n            // patchOnProperties method\n            proxySocketProto = socket;\n            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {\n                proxySocket[propName] = function () {\n                    return socket[propName].apply(socket, arguments);\n                };\n            });\n        }\n        else {\n            // we can patch the real socket\n            proxySocket = socket;\n        }\n        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open'], proxySocketProto);\n        return proxySocket;\n    };\n    for (var prop in WS) {\n        _global['WebSocket'][prop] = WS[prop];\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar globalEventHandlersEventNames = [\n    'abort',\n    'animationcancel',\n    'animationend',\n    'animationiteration',\n    'auxclick',\n    'beforeinput',\n    'blur',\n    'cancel',\n    'canplay',\n    'canplaythrough',\n    'change',\n    'compositionstart',\n    'compositionupdate',\n    'compositionend',\n    'cuechange',\n    'click',\n    'close',\n    'contextmenu',\n    'curechange',\n    'dblclick',\n    'drag',\n    'dragend',\n    'dragenter',\n    'dragexit',\n    'dragleave',\n    'dragover',\n    'drop',\n    'durationchange',\n    'emptied',\n    'ended',\n    'error',\n    'focus',\n    'focusin',\n    'focusout',\n    'gotpointercapture',\n    'input',\n    'invalid',\n    'keydown',\n    'keypress',\n    'keyup',\n    'load',\n    'loadstart',\n    'loadeddata',\n    'loadedmetadata',\n    'lostpointercapture',\n    'mousedown',\n    'mouseenter',\n    'mouseleave',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'mousewheel',\n    'pause',\n    'play',\n    'playing',\n    'pointercancel',\n    'pointerdown',\n    'pointerenter',\n    'pointerleave',\n    'pointerlockchange',\n    'mozpointerlockchange',\n    'webkitpointerlockerchange',\n    'pointerlockerror',\n    'mozpointerlockerror',\n    'webkitpointerlockerror',\n    'pointermove',\n    'pointout',\n    'pointerover',\n    'pointerup',\n    'progress',\n    'ratechange',\n    'reset',\n    'resize',\n    'scroll',\n    'seeked',\n    'seeking',\n    'select',\n    'selectionchange',\n    'selectstart',\n    'show',\n    'sort',\n    'stalled',\n    'submit',\n    'suspend',\n    'timeupdate',\n    'volumechange',\n    'touchcancel',\n    'touchmove',\n    'touchstart',\n    'transitioncancel',\n    'transitionend',\n    'waiting',\n    'wheel'\n];\nvar documentEventNames = [\n    'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'fullscreenchange',\n    'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',\n    'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange'\n];\nvar windowEventNames = [\n    'absolutedeviceorientation',\n    'afterinput',\n    'afterprint',\n    'appinstalled',\n    'beforeinstallprompt',\n    'beforeprint',\n    'beforeunload',\n    'devicelight',\n    'devicemotion',\n    'deviceorientation',\n    'deviceorientationabsolute',\n    'deviceproximity',\n    'hashchange',\n    'languagechange',\n    'message',\n    'mozbeforepaint',\n    'offline',\n    'online',\n    'paint',\n    'pageshow',\n    'pagehide',\n    'popstate',\n    'rejectionhandled',\n    'storage',\n    'unhandledrejection',\n    'unload',\n    'userproximity',\n    'vrdisplyconnected',\n    'vrdisplaydisconnected',\n    'vrdisplaypresentchange'\n];\nvar htmlElementEventNames = [\n    'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',\n    'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',\n    'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'\n];\nvar mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];\nvar ieElementEventNames = [\n    'activate',\n    'afterupdate',\n    'ariarequest',\n    'beforeactivate',\n    'beforedeactivate',\n    'beforeeditfocus',\n    'beforeupdate',\n    'cellchange',\n    'controlselect',\n    'dataavailable',\n    'datasetchanged',\n    'datasetcomplete',\n    'errorupdate',\n    'filterchange',\n    'layoutcomplete',\n    'losecapture',\n    'move',\n    'moveend',\n    'movestart',\n    'propertychange',\n    'resizeend',\n    'resizestart',\n    'rowenter',\n    'rowexit',\n    'rowsdelete',\n    'rowsinserted',\n    'command',\n    'compassneedscalibration',\n    'deactivate',\n    'help',\n    'mscontentzoom',\n    'msmanipulationstatechanged',\n    'msgesturechange',\n    'msgesturedoubletap',\n    'msgestureend',\n    'msgesturehold',\n    'msgesturestart',\n    'msgesturetap',\n    'msgotpointercapture',\n    'msinertiastart',\n    'mslostpointercapture',\n    'mspointercancel',\n    'mspointerdown',\n    'mspointerenter',\n    'mspointerhover',\n    'mspointerleave',\n    'mspointermove',\n    'mspointerout',\n    'mspointerover',\n    'mspointerup',\n    'pointerout',\n    'mssitemodejumplistitemremoved',\n    'msthumbnailclick',\n    'stop',\n    'storagecommit'\n];\nvar webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];\nvar formEventNames = ['autocomplete', 'autocompleteerror'];\nvar detailEventNames = ['toggle'];\nvar frameEventNames = ['load'];\nvar frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll'];\nvar marqueeEventNames = ['bounce', 'finish', 'start'];\nvar XMLHttpRequestEventNames = [\n    'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',\n    'readystatechange'\n];\nvar IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];\nvar websocketEventNames = ['close', 'error', 'open', 'message'];\nvar eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);\nfunction propertyDescriptorPatch(_global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    var supportsWebSocket = typeof WebSocket !== 'undefined';\n    if (canPatchViaPropertyDescriptor()) {\n        // for browsers that we can patch the descriptor:  Chrome & Firefox\n        if (isBrowser) {\n            // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n            // so we need to pass WindowPrototype to check onProp exist or not\n            patchOnProperties(window, eventNames, Object.getPrototypeOf(window));\n            patchOnProperties(Document.prototype, eventNames);\n            if (typeof window['SVGElement'] !== 'undefined') {\n                patchOnProperties(window['SVGElement'].prototype, eventNames);\n            }\n            patchOnProperties(Element.prototype, eventNames);\n            patchOnProperties(HTMLElement.prototype, eventNames);\n            patchOnProperties(HTMLMediaElement.prototype, mediaElementEventNames);\n            patchOnProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames));\n            patchOnProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames));\n            patchOnProperties(HTMLFrameElement.prototype, frameEventNames);\n            patchOnProperties(HTMLIFrameElement.prototype, frameEventNames);\n            var HTMLMarqueeElement_1 = window['HTMLMarqueeElement'];\n            if (HTMLMarqueeElement_1) {\n                patchOnProperties(HTMLMarqueeElement_1.prototype, marqueeEventNames);\n            }\n        }\n        patchOnProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames);\n        var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];\n        if (XMLHttpRequestEventTarget) {\n            patchOnProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames);\n        }\n        if (typeof IDBIndex !== 'undefined') {\n            patchOnProperties(IDBIndex.prototype, IDBIndexEventNames);\n            patchOnProperties(IDBRequest.prototype, IDBIndexEventNames);\n            patchOnProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames);\n            patchOnProperties(IDBDatabase.prototype, IDBIndexEventNames);\n            patchOnProperties(IDBTransaction.prototype, IDBIndexEventNames);\n            patchOnProperties(IDBCursor.prototype, IDBIndexEventNames);\n        }\n        if (supportsWebSocket) {\n            patchOnProperties(WebSocket.prototype, websocketEventNames);\n        }\n    }\n    else {\n        // Safari, Android browsers (Jelly Bean)\n        patchViaCapturingAllTheEvents();\n        patchClass('XMLHttpRequest');\n        if (supportsWebSocket) {\n            apply(_global);\n        }\n    }\n}\nfunction canPatchViaPropertyDescriptor() {\n    if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&\n        typeof Element !== 'undefined') {\n        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364\n        // IDL interface attributes are not configurable\n        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');\n        if (desc && !desc.configurable)\n            return false;\n    }\n    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');\n    // add enumerable and configurable here because in opera\n    // by default XMLHttpRequest.prototype.onreadystatechange is undefined\n    // without adding enumerable and configurable will cause onreadystatechange\n    // non-configurable\n    // and if XMLHttpRequest.prototype.onreadystatechange is undefined,\n    // we should set a real desc instead a fake one\n    if (xhrDesc) {\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                return true;\n            }\n        });\n        var req = new XMLHttpRequest();\n        var result = !!req.onreadystatechange;\n        // restore original desc\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});\n        return result;\n    }\n    else {\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                return this[zoneSymbol('fakeonreadystatechange')];\n            },\n            set: function (value) {\n                this[zoneSymbol('fakeonreadystatechange')] = value;\n            }\n        });\n        var req = new XMLHttpRequest();\n        var detectFunc = function () { };\n        req.onreadystatechange = detectFunc;\n        var result = req[zoneSymbol('fakeonreadystatechange')] === detectFunc;\n        req.onreadystatechange = null;\n        return result;\n    }\n}\n\nvar unboundKey = zoneSymbol('unbound');\n// Whenever any eventListener fires, we check the eventListener target and all parents\n// for `onwhatever` properties and replace them with zone-bound functions\n// - Chrome (for now)\nfunction patchViaCapturingAllTheEvents() {\n    var _loop_1 = function (i) {\n        var property = eventNames[i];\n        var onproperty = 'on' + property;\n        self.addEventListener(property, function (event) {\n            var elt = event.target, bound, source;\n            if (elt) {\n                source = elt.constructor['name'] + '.' + onproperty;\n            }\n            else {\n                source = 'unknown.' + onproperty;\n            }\n            while (elt) {\n                if (elt[onproperty] && !elt[onproperty][unboundKey]) {\n                    bound = Zone.current.wrap(elt[onproperty], source);\n                    bound[unboundKey] = elt[onproperty];\n                    elt[onproperty] = bound;\n                }\n                elt = elt.parentElement;\n            }\n        }, true);\n    };\n    for (var i = 0; i < eventNames.length; i++) {\n        _loop_1(i);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction eventTargetPatch(_global, api) {\n    var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';\n    var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'\n        .split(',');\n    var EVENT_TARGET = 'EventTarget';\n    var apis = [];\n    var isWtf = _global['wtf'];\n    var WTF_ISSUE_555_ARRAY = WTF_ISSUE_555.split(',');\n    if (isWtf) {\n        // Workaround for: https://github.com/google/tracing-framework/issues/555\n        apis = WTF_ISSUE_555_ARRAY.map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);\n    }\n    else if (_global[EVENT_TARGET]) {\n        apis.push(EVENT_TARGET);\n    }\n    else {\n        // Note: EventTarget is not available in all browsers,\n        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget\n        apis = NO_EVENT_TARGET;\n    }\n    var isDisableIECheck = _global['__Zone_disable_IE_check'] || false;\n    var isEnableCrossContextCheck = _global['__Zone_enable_cross_context_check'] || false;\n    var ieOrEdge = isIEOrEdge();\n    var ADD_EVENT_LISTENER_SOURCE = '.addEventListener:';\n    var FUNCTION_WRAPPER = '[object FunctionWrapper]';\n    var BROWSER_TOOLS = 'function __BROWSERTOOLS_CONSOLE_SAFEFUNC() { [native code] }';\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (var i = 0; i < eventNames.length; i++) {\n        var eventName = eventNames[i];\n        var falseEventName = eventName + FALSE_STR;\n        var trueEventName = eventName + TRUE_STR;\n        var symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames[eventName] = {};\n        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n    }\n    //  predefine all task.source string\n    for (var i = 0; i < WTF_ISSUE_555.length; i++) {\n        var target = WTF_ISSUE_555_ARRAY[i];\n        var targets = globalSources[target] = {};\n        for (var j = 0; j < eventNames.length; j++) {\n            var eventName = eventNames[j];\n            targets[eventName] = target + ADD_EVENT_LISTENER_SOURCE + eventName;\n        }\n    }\n    var checkIEAndCrossContext = function (nativeDelegate, delegate, target, args) {\n        if (!isDisableIECheck && ieOrEdge) {\n            if (isEnableCrossContextCheck) {\n                try {\n                    var testString = delegate.toString();\n                    if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {\n                        nativeDelegate.apply(target, args);\n                        return false;\n                    }\n                }\n                catch (error) {\n                    nativeDelegate.apply(target, args);\n                    return false;\n                }\n            }\n            else {\n                var testString = delegate.toString();\n                if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {\n                    nativeDelegate.apply(target, args);\n                    return false;\n                }\n            }\n        }\n        else if (isEnableCrossContextCheck) {\n            try {\n                delegate.toString();\n            }\n            catch (error) {\n                nativeDelegate.apply(target, args);\n                return false;\n            }\n        }\n        return true;\n    };\n    for (var i = 0; i < apis.length; i++) {\n        var type = _global[apis[i]];\n        patchEventTargetMethods(type && type.prototype, { validateHandler: checkIEAndCrossContext });\n    }\n    api.patchEventTargetMethods = patchEventTargetMethods;\n    return true;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction registerElementPatch(_global) {\n    if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {\n        return;\n    }\n    var _registerElement = document.registerElement;\n    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];\n    document.registerElement = function (name, opts) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                var source = 'Document.registerElement::' + callback;\n                if (opts.prototype.hasOwnProperty(callback)) {\n                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);\n                    if (descriptor && descriptor.value) {\n                        descriptor.value = Zone.current.wrap(descriptor.value, source);\n                        _redefineProperty(opts.prototype, callback, descriptor);\n                    }\n                    else {\n                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n                    }\n                }\n                else if (opts.prototype[callback]) {\n                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n                }\n            });\n        }\n        return _registerElement.apply(document, [name, opts]);\n    };\n    attachOriginToPatched(document.registerElement, _registerElement);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('timers', function (global, Zone, api) {\n    var set = 'set';\n    var clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', function (global, Zone, api) {\n    var blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (var i = 0; i < blockingMethods.length; i++) {\n        var name_1 = blockingMethods[i];\n        patchMethod(global, name_1, function (delegate, symbol, name) {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', function (global, Zone, api) {\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    var XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        // TODO: @JiaLiPassion, add this back later.\n        api.patchEventTargetMethods(XMLHttpRequestEventTarget.prototype);\n    }\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', function (global, Zone, api) {\n    propertyDescriptorPatch(global);\n    propertyPatch();\n    registerElementPatch(global);\n});\nZone.__load_patch('canvas', function (global, Zone, api) {\n    var HTMLCanvasElement = global['HTMLCanvasElement'];\n    if (typeof HTMLCanvasElement !== 'undefined' && HTMLCanvasElement.prototype &&\n        HTMLCanvasElement.prototype.toBlob) {\n        patchMacroTask(HTMLCanvasElement.prototype, 'toBlob', function (self, args) {\n            return { name: 'HTMLCanvasElement.toBlob', target: self, callbackIndex: 0, args: args };\n        });\n    }\n});\nZone.__load_patch('XHR', function (global, Zone, api) {\n    // Treat XMLHTTPRequest as a macrotask.\n    patchXHR(global);\n    var XHR_TASK = zoneSymbol('xhrTask');\n    var XHR_SYNC = zoneSymbol('xhrSync');\n    var XHR_LISTENER = zoneSymbol('xhrListener');\n    var XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    function patchXHR(window) {\n        function findPendingTask(target) {\n            var pendingTask = target[XHR_TASK];\n            return pendingTask;\n        }\n        function scheduleTask(task) {\n            XMLHttpRequest[XHR_SCHEDULED] = false;\n            var data = task.data;\n            // remove existing event listener\n            var listener = data.target[XHR_LISTENER];\n            var oriAddListener = data.target[zoneSymbol('addEventListener')];\n            var oriRemoveListener = data.target[zoneSymbol('removeEventListener')];\n            if (listener) {\n                oriRemoveListener.apply(data.target, ['readystatechange', listener]);\n            }\n            var newListener = data.target[XHR_LISTENER] = function () {\n                if (data.target.readyState === data.target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] &&\n                        task.state === 'scheduled') {\n                        task.invoke();\n                    }\n                }\n            };\n            oriAddListener.apply(data.target, ['readystatechange', newListener]);\n            var storedTask = data.target[XHR_TASK];\n            if (!storedTask) {\n                data.target[XHR_TASK] = task;\n            }\n            sendNative.apply(data.target, data.args);\n            XMLHttpRequest[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            var data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            return openNative.apply(self, args);\n        }; });\n        var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {\n            var zone = Zone.current;\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };\n                return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);\n            }\n        }; });\n        var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {\n            var task = findPendingTask(self);\n            if (task && typeof task.type == 'string') {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        }; });\n    }\n});\nZone.__load_patch('geolocation', function (global, Zone, api) {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', function (global, Zone, api) {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            var eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(function (eventTask) {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                var PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    var evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\nZone.__load_patch('util', function (global, Zone, api) {\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/zone.js/dist/zone.js\n");

/***/ }),

/***/ "./src/main/webapp/app/polyfills.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/* tslint:disable */\r\n__webpack_require__(\"./node_modules/reflect-metadata/Reflect.ts\");\r\n__webpack_require__(\"./node_modules/zone.js/dist/zone.js\");\r\n__webpack_require__(\"./src/main/webapp/manifest.webapp\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL3BvbHlmaWxscy50cz8yZDI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0JBQW9CO0FBQ3BCLGtFQUFrQztBQUNsQywyREFBMkI7QUFFM0IsbUJBQU8sQ0FBQyxtQ0FBb0IsQ0FBQyxDQUFDIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9wb2x5ZmlsbHMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhL1JlZmxlY3QnO1xuaW1wb3J0ICd6b25lLmpzL2Rpc3Qvem9uZSc7XG5cbnJlcXVpcmUoJy4uL21hbmlmZXN0LndlYmFwcCcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvbWFpbi93ZWJhcHAvYXBwL3BvbHlmaWxscy50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/polyfills.ts\n");

/***/ }),

/***/ "./src/main/webapp/manifest.webapp":
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"manifest.webapp\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvbWFuaWZlc3Qud2ViYXBwP2QzOTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvbWFuaWZlc3Qud2ViYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwibWFuaWZlc3Qud2ViYXBwXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbWFpbi93ZWJhcHAvbWFuaWZlc3Qud2ViYXBwXG4vLyBtb2R1bGUgaWQgPSAuL3NyYy9tYWluL3dlYmFwcC9tYW5pZmVzdC53ZWJhcHBcbi8vIG1vZHVsZSBjaHVua3MgPSAyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/manifest.webapp\n");

/***/ })

},["./src/main/webapp/app/polyfills.ts"]);